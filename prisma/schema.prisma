datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator worktap_client {
  provider = "prisma-client-js"
}

enum UserRole {
  customer
  executor
}

model Category {
  id          String     @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String     @map("name") @db.VarChar()
  subcategory Category[] @relation("subcategory")
  category    Category?  @relation("subcategory", fields: [parentId], references: [id])
  parentId    String?    @map("parent_id") @db.Uuid
  orders      Order[]

  @@id([id])
  @@map("category")
}

model User {
  id          String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String       @map("name") @db.VarChar()
  surname     String       @map("surname") @db.VarChar()
  email       String       @map("email") @db.VarChar()
  phone       String       @map("phone") @db.VarChar()
  password    String       @map("password") @db.VarChar()
  image       String?      @map("image") @db.VarChar()
  roles       UserRole[]   @map("roles")
  userDevices UserDevice[]
  works       Work[]
  orders      Order[]

  @@id([id])
  @@unique([email])
  @@map("user")
}

model UserDevice {
  id           String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  userAgent    String?  @map("user_agent") @db.VarChar()
  accessToken  String   @map("access_token") @db.VarChar()
  refreshToken String   @map("refresh_token") @db.VarChar()
  ip           String?  @map("ip") @db.VarChar()
  userId       String   @map("user_id") @db.Uuid
  deletedAt    DateTime @map("deleted_at") @db.Timestamp()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_device")
}

model Work {
  id          String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String   @map("name") @db.VarChar()
  price       String   @map("price") @db.VarChar()
  image       String   @map("image") @db.VarChar()
  description String   @map("description") @db.VarChar()
  createdBy   String   @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamp()

  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("work")
}

model Order {
  id          String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String   @map("name") @db.VarChar()
  price       String   @map("price") @db.VarChar()
  files       String[] @map("files") @db.VarChar()
  description String   @map("description") @db.VarChar()
  categoryId  String   @map("category_id") @db.Uuid
  createdBy   String   @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamp()

  user     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("order")
}
